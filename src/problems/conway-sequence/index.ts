import { getTestCases } from "../../lib/fs";
import type { TestCases } from "../../types/TestCases";

async function main() {
  let testCases: TestCases;
  try {
    testCases = await getTestCases(__dirname, "test.txt");
  } catch (error) {
    return 1;
  }

  const [inputs, expected] = testCases;

  inputs.forEach((input, index) => {
    function readline() {
      const line = input.shift();
      if (!line) throw new Error("Unexpected end of input.");
      return line;
    }

    /**
     * Parses the input to extract the origin and line index.
     * @returns An object containing the origin and line index.
     */
    function parse() {
      const origin = Number(readline());
      const lineIndex = Number(readline());

      return { origin, lineIndex };
    }

    /**
     * Generates the next sequence in the Conway sequence based on the given array.
     * The Conway sequence is generated by "saying" the count and value of each group of consecutive numbers in the previous sequence.
     * For example, given the array [1, 1, 2, 3], the next sequence would be [2, 1, 1, 2, 2, 3].
     * @param arr The array representing the previous sequence.
     * @returns The next sequence in the Conway sequence.
     */
    function lookAndSay(arr: number[]) {
      if (arr.length === 0) return [];

      const say: number[] = [];
      let count = 1;

      for (let i = 1; i <= arr.length; i++) {
        if (i === arr.length || arr[i] !== arr[i - 1]) {
          say.push(count, arr[i - 1]);
          count = 1;
          continue;
        }
        count++;
      }

      return say;
    }

    const { origin, lineIndex } = parse();
    console.log({ origin, lineIndex });

    let say: number[] = [origin];
    for (let i = 0; i < lineIndex - 1; i++) {
      say = lookAndSay(say);
    }

    console.log(say.join(" "));

    console.assert(say.join(" ") === expected[index][0]);
  });

  return 0;
}

main();
